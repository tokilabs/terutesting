// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i13eimJzTqVDJ7txL3iZyA
// Component: L6I88p1sTt
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: i13eimJzTqVDJ7txL3iZyA/projectcss
import * as sty from "./PlasmicHomeWorkButton.module.css"; // plasmic-import: L6I88p1sTt/css

import ArrowRightCircle3Icon from "./icons/PlasmicIcon__ArrowRightCircle3"; // plasmic-import: 1LCBJpbHDZy/icon
import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: AuqRINwL7Zy/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: nt0ds6kTqnp/icon

export type PlasmicHomeWorkButton__VariantMembers = {
  _25: "_25";
  _50: "_50";
  _75: "_75";
  _100: "_100";
};

export type PlasmicHomeWorkButton__VariantsArgs = {
  _25?: SingleBooleanChoiceArg<"_25">;
  _50?: SingleBooleanChoiceArg<"_50">;
  _75?: SingleBooleanChoiceArg<"_75">;
  _100?: SingleBooleanChoiceArg<"_100">;
};

type VariantPropType = keyof PlasmicHomeWorkButton__VariantsArgs;
export const PlasmicHomeWorkButton__VariantProps = new Array<VariantPropType>(
  "_25",
  "_50",
  "_75",
  "_100"
);

export type PlasmicHomeWorkButton__ArgsType = {};
type ArgPropType = keyof PlasmicHomeWorkButton__ArgsType;
export const PlasmicHomeWorkButton__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeWorkButton__OverridesType = {
  root?: p.Flex<"div">;
  property10?: p.Flex<"div">;
  body?: p.Flex<"div">;
  body10Pt?: p.Flex<"div">;
  percentBall?: p.Flex<"div">;
  group91?: p.Flex<"div">;
  arrowRightCircle?: p.Flex<"div">;
  arrowRightCircle2?: p.Flex<"div">;
  property125?: p.Flex<"div">;
  body2?: p.Flex<"div">;
  body10Pt2?: p.Flex<"div">;
  percentBall2?: p.Flex<"div">;
  group92?: p.Flex<"div">;
  property150?: p.Flex<"div">;
  body3?: p.Flex<"div">;
  body10Pt3?: p.Flex<"div">;
  percentBall3?: p.Flex<"div">;
  group93?: p.Flex<"div">;
  property175?: p.Flex<"div">;
  body4?: p.Flex<"div">;
  body10Pt4?: p.Flex<"div">;
  percentBall4?: p.Flex<"div">;
  maskGroup?: p.Flex<"div">;
  group90?: p.Flex<"div">;
  property1Completed?: p.Flex<"div">;
  body5?: p.Flex<"div">;
  body10Pt5?: p.Flex<"div">;
  percentBall5?: p.Flex<"div">;
  maskGroup2?: p.Flex<"div">;
  document?: p.Flex<"div">;
  property1Completed2?: p.Flex<"div">;
  body6?: p.Flex<"div">;
  body10Pt6?: p.Flex<"div">;
  percentBall6?: p.Flex<"div">;
  maskGroup3?: p.Flex<"div">;
  document2?: p.Flex<"div">;
  property1Completed3?: p.Flex<"div">;
  body7?: p.Flex<"div">;
  body10Pt7?: p.Flex<"div">;
  percentBall7?: p.Flex<"div">;
  maskGroup4?: p.Flex<"div">;
  document3?: p.Flex<"div">;
  property1Completed4?: p.Flex<"div">;
  body8?: p.Flex<"div">;
  body10Pt8?: p.Flex<"div">;
  percentBall8?: p.Flex<"div">;
  maskGroup5?: p.Flex<"div">;
  document4?: p.Flex<"div">;
};

export interface DefaultHomeWorkButtonProps {
  _25?: SingleBooleanChoiceArg<"_25">;
  _50?: SingleBooleanChoiceArg<"_50">;
  _75?: SingleBooleanChoiceArg<"_75">;
  _100?: SingleBooleanChoiceArg<"_100">;
  className?: string;
}

function PlasmicHomeWorkButton__RenderFunc(props: {
  variants: PlasmicHomeWorkButton__VariantsArgs;
  args: PlasmicHomeWorkButton__ArgsType;
  overrides: PlasmicHomeWorkButton__OverridesType;
  dataFetches?: PlasmicHomeWorkButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root___100]: hasVariant(variants, "_100", "_100"),
        [sty.root___25__50]:
          hasVariant(variants, "_25", "_25") &&
          hasVariant(variants, "_50", "_50"),
        [sty.root___25__50__75__100]:
          hasVariant(variants, "_25", "_25") &&
          hasVariant(variants, "_50", "_50") &&
          hasVariant(variants, "_75", "_75") &&
          hasVariant(variants, "_100", "_100"),
        [sty.root___50]: hasVariant(variants, "_50", "_50"),
        [sty.root___50__75]:
          hasVariant(variants, "_50", "_50") &&
          hasVariant(variants, "_75", "_75")
      })}
    >
      {(
        hasVariant(variants, "_50", "_50")
          ? true
          : hasVariant(variants, "_25", "_25")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property10"}
          data-plasmic-override={overrides.property10}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property10, {
            [sty.property10___25]: hasVariant(variants, "_25", "_25"),
            [sty.property10___50]: hasVariant(variants, "_50", "_50")
          })}
        >
          {(
            hasVariant(variants, "_100", "_100")
              ? true
              : hasVariant(variants, "_75", "_75")
              ? true
              : hasVariant(variants, "_25", "_25")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              hasGap={true}
              className={classNames(defaultcss.all, sty.body, {
                [sty.body___100]: hasVariant(variants, "_100", "_100"),
                [sty.body___25]: hasVariant(variants, "_25", "_25"),
                [sty.body___75]: hasVariant(variants, "_75", "_75")
              })}
            >
              {(
                hasVariant(variants, "_100", "_100")
                  ? true
                  : hasVariant(variants, "_75", "_75")
                  ? true
                  : hasVariant(variants, "_25", "_25")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"body10Pt"}
                  data-plasmic-override={overrides.body10Pt}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.body10Pt,
                    {
                      [sty.body10Pt___100]: hasVariant(
                        variants,
                        "_100",
                        "_100"
                      ),
                      [sty.body10Pt___25]: hasVariant(variants, "_25", "_25"),
                      [sty.body10Pt___75]: hasVariant(variants, "_75", "_75")
                    }
                  )}
                >
                  {"MO/DAY"}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(variants, "_100", "_100")
              ? true
              : hasVariant(variants, "_75", "_75")
              ? true
              : hasVariant(variants, "_25", "_25")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"percentBall"}
              data-plasmic-override={overrides.percentBall}
              className={classNames(defaultcss.all, sty.percentBall, {
                [sty.percentBall___100]: hasVariant(variants, "_100", "_100"),
                [sty.percentBall___25]: hasVariant(variants, "_25", "_25"),
                [sty.percentBall___75]: hasVariant(variants, "_75", "_75")
              })}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__qddP
                )}
              >
                {"0%"}
              </div>
            </div>
          ) : null}
          {(
            hasVariant(variants, "_100", "_100")
              ? true
              : hasVariant(variants, "_75", "_75")
              ? true
              : hasVariant(variants, "_25", "_25")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"group91"}
              data-plasmic-override={overrides.group91}
              className={classNames(defaultcss.all, sty.group91, {
                [sty.group91___100]: hasVariant(variants, "_100", "_100"),
                [sty.group91___25]: hasVariant(variants, "_25", "_25"),
                [sty.group91___75]: hasVariant(variants, "_75", "_75")
              })}
            >
              <div
                data-plasmic-name={"arrowRightCircle"}
                data-plasmic-override={overrides.arrowRightCircle}
                className={classNames(defaultcss.all, sty.arrowRightCircle)}
              >
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__lxzL)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"arrowRightCircle2"}
                data-plasmic-override={overrides.arrowRightCircle2}
                className={classNames(defaultcss.all, sty.arrowRightCircle2)}
              >
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__rJrMs)}
                  role={"img"}
                />
              </div>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "_25", "_25") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text___9Dou,
            { [sty.text___25___9DouDqn6T]: hasVariant(variants, "_25", "_25") }
          )}
        >
          {hasVariant(variants, "_25", "_25") ? "MO/DAY\n25%" : "MO/DAY\n25%"}
        </div>
      ) : null}
      {(hasVariant(variants, "_25", "_25") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property125"}
          data-plasmic-override={overrides.property125}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property125, {
            [sty.property125___25]: hasVariant(variants, "_25", "_25")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body2"}
            data-plasmic-override={overrides.body2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body2)}
          >
            <div
              data-plasmic-name={"body10Pt2"}
              data-plasmic-override={overrides.body10Pt2}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt2
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall2"}
            data-plasmic-override={overrides.percentBall2}
            className={classNames(defaultcss.all, sty.percentBall2, {
              [sty.percentBall2___25]: hasVariant(variants, "_25", "_25")
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text___6Pyy4,
                {
                  [sty.text___25___6Pyy4Dqn6T]: hasVariant(
                    variants,
                    "_25",
                    "_25"
                  )
                }
              )}
            >
              {"25%"}
            </div>

            {(hasVariant(variants, "_25", "_25") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg___75K7Q, {
                  [sty.svg___25___75K7Qdqn6T]: hasVariant(
                    variants,
                    "_25",
                    "_25"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>

          <div
            data-plasmic-name={"group92"}
            data-plasmic-override={overrides.group92}
            className={classNames(defaultcss.all, sty.group92)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__vh8Bw)}>
              {(hasVariant(variants, "_25", "_25") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__wifsD, {
                    [sty.svg___25__wifsDdqn6T]: hasVariant(
                      variants,
                      "_25",
                      "_25"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__teA13)}>
              {(hasVariant(variants, "_25", "_25") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__oZsG2, {
                    [sty.svg___25__oZsG2Dqn6T]: hasVariant(
                      variants,
                      "_25",
                      "_25"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "_50", "_50") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property150"}
          data-plasmic-override={overrides.property150}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property150, {
            [sty.property150___25__50]:
              hasVariant(variants, "_25", "_25") &&
              hasVariant(variants, "_50", "_50"),
            [sty.property150___50]: hasVariant(variants, "_50", "_50"),
            [sty.property150___50__75]:
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body3"}
            data-plasmic-override={overrides.body3}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body3)}
          >
            <div
              data-plasmic-name={"body10Pt3"}
              data-plasmic-override={overrides.body10Pt3}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt3
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall3"}
            data-plasmic-override={overrides.percentBall3}
            className={classNames(defaultcss.all, sty.percentBall3)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__rSlm,
                {
                  [sty.text___50__rSlm9JeyI]: hasVariant(variants, "_50", "_50")
                }
              )}
            >
              {"50%"}
            </div>

            {(hasVariant(variants, "_50", "_50") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg__jhAfv, {
                  [sty.svg___50__jhAfv9JeyI]: hasVariant(variants, "_50", "_50")
                })}
                role={"img"}
              />
            ) : null}
          </div>

          <div
            data-plasmic-name={"group93"}
            data-plasmic-override={overrides.group93}
            className={classNames(defaultcss.all, sty.group93)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__kq7X)}>
              {(hasVariant(variants, "_50", "_50") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__ofLX, {
                    [sty.svg___50__ofLX9JeyI]: hasVariant(
                      variants,
                      "_50",
                      "_50"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__q7QN)}>
              {(hasVariant(variants, "_50", "_50") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg___6Sgla, {
                    [sty.svg___50___6Sgla9JeyI]: hasVariant(
                      variants,
                      "_50",
                      "_50"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "_75", "_75") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property175"}
          data-plasmic-override={overrides.property175}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property175, {
            [sty.property175___25__50__75__100]:
              hasVariant(variants, "_25", "_25") &&
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75") &&
              hasVariant(variants, "_100", "_100"),
            [sty.property175___50__75]:
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75"),
            [sty.property175___75]: hasVariant(variants, "_75", "_75")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body4"}
            data-plasmic-override={overrides.body4}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body4)}
          >
            <div
              data-plasmic-name={"body10Pt4"}
              data-plasmic-override={overrides.body10Pt4}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt4
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall4"}
            data-plasmic-override={overrides.percentBall4}
            className={classNames(defaultcss.all, sty.percentBall4)}
          >
            {(hasVariant(variants, "_75", "_75") ? true : true) ? (
              <div
                data-plasmic-name={"maskGroup"}
                data-plasmic-override={overrides.maskGroup}
                className={classNames(defaultcss.all, sty.maskGroup, {
                  [sty.maskGroup___75]: hasVariant(variants, "_75", "_75")
                })}
              >
                {(hasVariant(variants, "_75", "_75") ? true : false) ? (
                  <Ellipse2Icon
                    className={classNames(defaultcss.all, sty.svg__obo9T, {
                      [sty.svg___75__obo9TZTak0]: hasVariant(
                        variants,
                        "_75",
                        "_75"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "_75", "_75") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg__wmMc8, {
                  [sty.svg___75__wmMc8ZTak0]: hasVariant(variants, "_75", "_75")
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__qlcVw,
                {
                  [sty.text___75__qlcVwZTak0]: hasVariant(
                    variants,
                    "_75",
                    "_75"
                  )
                }
              )}
            >
              {"75%"}
            </div>
          </div>

          <div
            data-plasmic-name={"group90"}
            data-plasmic-override={overrides.group90}
            className={classNames(defaultcss.all, sty.group90)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__g9CyG)}>
              {(hasVariant(variants, "_75", "_75") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg___4LgRx, {
                    [sty.svg___75___4LgRxzTak0]: hasVariant(
                      variants,
                      "_75",
                      "_75"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__vlrhk)}>
              {(hasVariant(variants, "_75", "_75") ? true : false) ? (
                <ArrowRightCircle3Icon
                  className={classNames(defaultcss.all, sty.svg__o60Xn, {
                    [sty.svg___25__50__75__100__o60XNdqn6T9JeyIZTak0Bwttb]:
                      hasVariant(variants, "_25", "_25") &&
                      hasVariant(variants, "_50", "_50") &&
                      hasVariant(variants, "_75", "_75") &&
                      hasVariant(variants, "_100", "_100"),
                    [sty.svg___75__o60XnzTak0]: hasVariant(
                      variants,
                      "_75",
                      "_75"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "_100", "_100") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property1Completed"}
          data-plasmic-override={overrides.property1Completed}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property1Completed, {
            [sty.property1Completed___100]: hasVariant(variants, "_100", "_100")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body5"}
            data-plasmic-override={overrides.body5}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body5)}
          >
            <div
              data-plasmic-name={"body10Pt5"}
              data-plasmic-override={overrides.body10Pt5}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt5
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall5"}
            data-plasmic-override={overrides.percentBall5}
            className={classNames(defaultcss.all, sty.percentBall5)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : true) ? (
              <div
                data-plasmic-name={"maskGroup2"}
                data-plasmic-override={overrides.maskGroup2}
                className={classNames(defaultcss.all, sty.maskGroup2, {
                  [sty.maskGroup2___100]: hasVariant(variants, "_100", "_100")
                })}
              >
                {(hasVariant(variants, "_100", "_100") ? true : false) ? (
                  <Ellipse2Icon
                    className={classNames(defaultcss.all, sty.svg__oc7Bq, {
                      [sty.svg___100__oc7BqBwttb]: hasVariant(
                        variants,
                        "_100",
                        "_100"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg___9ZnVo, {
                  [sty.svg___100___9ZnVoBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__tGJl3,
                {
                  [sty.text___100__tGJl3Bwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                }
              )}
            >
              {"100%"}
            </div>
          </div>

          <div
            data-plasmic-name={"document"}
            data-plasmic-override={overrides.document}
            className={classNames(defaultcss.all, sty.document)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <DocumentIcon
                className={classNames(defaultcss.all, sty.svg__fidaq, {
                  [sty.svg___100__fidaqBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  ),
                  [sty.svg___25__50__75__100__fidaQdqn6T9JeyIZTak0Bwttb]:
                    hasVariant(variants, "_25", "_25") &&
                    hasVariant(variants, "_50", "_50") &&
                    hasVariant(variants, "_75", "_75") &&
                    hasVariant(variants, "_100", "_100")
                })}
                role={"img"}
              />
            ) : null}
          </div>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "_25", "_25") &&
        hasVariant(variants, "_50", "_50") &&
        hasVariant(variants, "_75", "_75") &&
        hasVariant(variants, "_100", "_100")
          ? true
          : hasVariant(variants, "_100", "_100")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property1Completed2"}
          data-plasmic-override={overrides.property1Completed2}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property1Completed2, {
            [sty.property1Completed2___100]: hasVariant(
              variants,
              "_100",
              "_100"
            ),
            [sty.property1Completed2___25__50__75__100]:
              hasVariant(variants, "_25", "_25") &&
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75") &&
              hasVariant(variants, "_100", "_100")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body6"}
            data-plasmic-override={overrides.body6}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body6)}
          >
            <div
              data-plasmic-name={"body10Pt6"}
              data-plasmic-override={overrides.body10Pt6}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt6
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall6"}
            data-plasmic-override={overrides.percentBall6}
            className={classNames(defaultcss.all, sty.percentBall6)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : true) ? (
              <div
                data-plasmic-name={"maskGroup3"}
                data-plasmic-override={overrides.maskGroup3}
                className={classNames(defaultcss.all, sty.maskGroup3, {
                  [sty.maskGroup3___100]: hasVariant(variants, "_100", "_100")
                })}
              >
                {(hasVariant(variants, "_100", "_100") ? true : false) ? (
                  <Ellipse2Icon
                    className={classNames(defaultcss.all, sty.svg__feqDk, {
                      [sty.svg___100__feqDkBwttb]: hasVariant(
                        variants,
                        "_100",
                        "_100"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg__xAy2, {
                  [sty.svg___100__xAy2Bwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__h6TZv,
                {
                  [sty.text___100__h6TZvBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                }
              )}
            >
              {"100%"}
            </div>
          </div>

          <div
            data-plasmic-name={"document2"}
            data-plasmic-override={overrides.document2}
            className={classNames(defaultcss.all, sty.document2)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <DocumentIcon
                className={classNames(defaultcss.all, sty.svg__fmP7C, {
                  [sty.svg___100__fmP7CBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "_25", "_25") &&
        hasVariant(variants, "_50", "_50") &&
        hasVariant(variants, "_75", "_75") &&
        hasVariant(variants, "_100", "_100")
          ? true
          : hasVariant(variants, "_100", "_100")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property1Completed3"}
          data-plasmic-override={overrides.property1Completed3}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property1Completed3, {
            [sty.property1Completed3___100]: hasVariant(
              variants,
              "_100",
              "_100"
            ),
            [sty.property1Completed3___25__50__75__100]:
              hasVariant(variants, "_25", "_25") &&
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75") &&
              hasVariant(variants, "_100", "_100")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body7"}
            data-plasmic-override={overrides.body7}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body7)}
          >
            <div
              data-plasmic-name={"body10Pt7"}
              data-plasmic-override={overrides.body10Pt7}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt7
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall7"}
            data-plasmic-override={overrides.percentBall7}
            className={classNames(defaultcss.all, sty.percentBall7)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : true) ? (
              <div
                data-plasmic-name={"maskGroup4"}
                data-plasmic-override={overrides.maskGroup4}
                className={classNames(defaultcss.all, sty.maskGroup4, {
                  [sty.maskGroup4___100]: hasVariant(variants, "_100", "_100")
                })}
              >
                {(hasVariant(variants, "_100", "_100") ? true : false) ? (
                  <Ellipse2Icon
                    className={classNames(defaultcss.all, sty.svg__dcwiW, {
                      [sty.svg___100__dcwiWBwttb]: hasVariant(
                        variants,
                        "_100",
                        "_100"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg__hovsQ, {
                  [sty.svg___100__hovsQBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__zDtgz,
                {
                  [sty.text___100__zDtgzBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                }
              )}
            >
              {"100%"}
            </div>
          </div>

          <div
            data-plasmic-name={"document3"}
            data-plasmic-override={overrides.document3}
            className={classNames(defaultcss.all, sty.document3)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <DocumentIcon
                className={classNames(defaultcss.all, sty.svg__f3Vld, {
                  [sty.svg___100__f3VldBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "_25", "_25") &&
        hasVariant(variants, "_50", "_50") &&
        hasVariant(variants, "_75", "_75") &&
        hasVariant(variants, "_100", "_100")
          ? true
          : hasVariant(variants, "_100", "_100")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"property1Completed4"}
          data-plasmic-override={overrides.property1Completed4}
          hasGap={true}
          className={classNames(defaultcss.all, sty.property1Completed4, {
            [sty.property1Completed4___100]: hasVariant(
              variants,
              "_100",
              "_100"
            ),
            [sty.property1Completed4___25__50__75__100]:
              hasVariant(variants, "_25", "_25") &&
              hasVariant(variants, "_50", "_50") &&
              hasVariant(variants, "_75", "_75") &&
              hasVariant(variants, "_100", "_100")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"body8"}
            data-plasmic-override={overrides.body8}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body8)}
          >
            <div
              data-plasmic-name={"body10Pt8"}
              data-plasmic-override={overrides.body10Pt8}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.body10Pt8
              )}
            >
              {"MO/DAY"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"percentBall8"}
            data-plasmic-override={overrides.percentBall8}
            className={classNames(defaultcss.all, sty.percentBall8)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : true) ? (
              <div
                data-plasmic-name={"maskGroup5"}
                data-plasmic-override={overrides.maskGroup5}
                className={classNames(defaultcss.all, sty.maskGroup5, {
                  [sty.maskGroup5___100]: hasVariant(variants, "_100", "_100")
                })}
              >
                {(hasVariant(variants, "_100", "_100") ? true : false) ? (
                  <Ellipse2Icon
                    className={classNames(defaultcss.all, sty.svg__kvJ4V, {
                      [sty.svg___100__kvJ4VBwttb]: hasVariant(
                        variants,
                        "_100",
                        "_100"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <Ellipse2Icon
                className={classNames(defaultcss.all, sty.svg__xsVkg, {
                  [sty.svg___100__xsVkgBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__j0CT,
                {
                  [sty.text___100__j0CTBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                }
              )}
            >
              {"100%"}
            </div>
          </div>

          <div
            data-plasmic-name={"document4"}
            data-plasmic-override={overrides.document4}
            className={classNames(defaultcss.all, sty.document4)}
          >
            {(hasVariant(variants, "_100", "_100") ? true : false) ? (
              <DocumentIcon
                className={classNames(defaultcss.all, sty.svg___3PH6E, {
                  [sty.svg___100___3PH6EBwttb]: hasVariant(
                    variants,
                    "_100",
                    "_100"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "property10",
    "body",
    "body10Pt",
    "percentBall",
    "group91",
    "arrowRightCircle",
    "arrowRightCircle2",
    "property125",
    "body2",
    "body10Pt2",
    "percentBall2",
    "group92",
    "property150",
    "body3",
    "body10Pt3",
    "percentBall3",
    "group93",
    "property175",
    "body4",
    "body10Pt4",
    "percentBall4",
    "maskGroup",
    "group90",
    "property1Completed",
    "body5",
    "body10Pt5",
    "percentBall5",
    "maskGroup2",
    "document",
    "property1Completed2",
    "body6",
    "body10Pt6",
    "percentBall6",
    "maskGroup3",
    "document2",
    "property1Completed3",
    "body7",
    "body10Pt7",
    "percentBall7",
    "maskGroup4",
    "document3",
    "property1Completed4",
    "body8",
    "body10Pt8",
    "percentBall8",
    "maskGroup5",
    "document4"
  ],
  property10: [
    "property10",
    "body",
    "body10Pt",
    "percentBall",
    "group91",
    "arrowRightCircle",
    "arrowRightCircle2"
  ],
  body: ["body", "body10Pt"],
  body10Pt: ["body10Pt"],
  percentBall: ["percentBall"],
  group91: ["group91", "arrowRightCircle", "arrowRightCircle2"],
  arrowRightCircle: ["arrowRightCircle"],
  arrowRightCircle2: ["arrowRightCircle2"],
  property125: ["property125", "body2", "body10Pt2", "percentBall2", "group92"],
  body2: ["body2", "body10Pt2"],
  body10Pt2: ["body10Pt2"],
  percentBall2: ["percentBall2"],
  group92: ["group92"],
  property150: ["property150", "body3", "body10Pt3", "percentBall3", "group93"],
  body3: ["body3", "body10Pt3"],
  body10Pt3: ["body10Pt3"],
  percentBall3: ["percentBall3"],
  group93: ["group93"],
  property175: [
    "property175",
    "body4",
    "body10Pt4",
    "percentBall4",
    "maskGroup",
    "group90"
  ],
  body4: ["body4", "body10Pt4"],
  body10Pt4: ["body10Pt4"],
  percentBall4: ["percentBall4", "maskGroup"],
  maskGroup: ["maskGroup"],
  group90: ["group90"],
  property1Completed: [
    "property1Completed",
    "body5",
    "body10Pt5",
    "percentBall5",
    "maskGroup2",
    "document"
  ],
  body5: ["body5", "body10Pt5"],
  body10Pt5: ["body10Pt5"],
  percentBall5: ["percentBall5", "maskGroup2"],
  maskGroup2: ["maskGroup2"],
  document: ["document"],
  property1Completed2: [
    "property1Completed2",
    "body6",
    "body10Pt6",
    "percentBall6",
    "maskGroup3",
    "document2"
  ],
  body6: ["body6", "body10Pt6"],
  body10Pt6: ["body10Pt6"],
  percentBall6: ["percentBall6", "maskGroup3"],
  maskGroup3: ["maskGroup3"],
  document2: ["document2"],
  property1Completed3: [
    "property1Completed3",
    "body7",
    "body10Pt7",
    "percentBall7",
    "maskGroup4",
    "document3"
  ],
  body7: ["body7", "body10Pt7"],
  body10Pt7: ["body10Pt7"],
  percentBall7: ["percentBall7", "maskGroup4"],
  maskGroup4: ["maskGroup4"],
  document3: ["document3"],
  property1Completed4: [
    "property1Completed4",
    "body8",
    "body10Pt8",
    "percentBall8",
    "maskGroup5",
    "document4"
  ],
  body8: ["body8", "body10Pt8"],
  body10Pt8: ["body10Pt8"],
  percentBall8: ["percentBall8", "maskGroup5"],
  maskGroup5: ["maskGroup5"],
  document4: ["document4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  property10: "div";
  body: "div";
  body10Pt: "div";
  percentBall: "div";
  group91: "div";
  arrowRightCircle: "div";
  arrowRightCircle2: "div";
  property125: "div";
  body2: "div";
  body10Pt2: "div";
  percentBall2: "div";
  group92: "div";
  property150: "div";
  body3: "div";
  body10Pt3: "div";
  percentBall3: "div";
  group93: "div";
  property175: "div";
  body4: "div";
  body10Pt4: "div";
  percentBall4: "div";
  maskGroup: "div";
  group90: "div";
  property1Completed: "div";
  body5: "div";
  body10Pt5: "div";
  percentBall5: "div";
  maskGroup2: "div";
  document: "div";
  property1Completed2: "div";
  body6: "div";
  body10Pt6: "div";
  percentBall6: "div";
  maskGroup3: "div";
  document2: "div";
  property1Completed3: "div";
  body7: "div";
  body10Pt7: "div";
  percentBall7: "div";
  maskGroup4: "div";
  document3: "div";
  property1Completed4: "div";
  body8: "div";
  body10Pt8: "div";
  percentBall8: "div";
  maskGroup5: "div";
  document4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeWorkButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeWorkButton__VariantsArgs;
    args?: PlasmicHomeWorkButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomeWorkButton__Fetches;
  } & Omit<PlasmicHomeWorkButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeWorkButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeWorkButton__ArgProps,
      internalVariantPropNames: PlasmicHomeWorkButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomeWorkButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeWorkButton";
  } else {
    func.displayName = `PlasmicHomeWorkButton.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeWorkButton = Object.assign(
  // Top-level PlasmicHomeWorkButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    property10: makeNodeComponent("property10"),
    body: makeNodeComponent("body"),
    body10Pt: makeNodeComponent("body10Pt"),
    percentBall: makeNodeComponent("percentBall"),
    group91: makeNodeComponent("group91"),
    arrowRightCircle: makeNodeComponent("arrowRightCircle"),
    arrowRightCircle2: makeNodeComponent("arrowRightCircle2"),
    property125: makeNodeComponent("property125"),
    body2: makeNodeComponent("body2"),
    body10Pt2: makeNodeComponent("body10Pt2"),
    percentBall2: makeNodeComponent("percentBall2"),
    group92: makeNodeComponent("group92"),
    property150: makeNodeComponent("property150"),
    body3: makeNodeComponent("body3"),
    body10Pt3: makeNodeComponent("body10Pt3"),
    percentBall3: makeNodeComponent("percentBall3"),
    group93: makeNodeComponent("group93"),
    property175: makeNodeComponent("property175"),
    body4: makeNodeComponent("body4"),
    body10Pt4: makeNodeComponent("body10Pt4"),
    percentBall4: makeNodeComponent("percentBall4"),
    maskGroup: makeNodeComponent("maskGroup"),
    group90: makeNodeComponent("group90"),
    property1Completed: makeNodeComponent("property1Completed"),
    body5: makeNodeComponent("body5"),
    body10Pt5: makeNodeComponent("body10Pt5"),
    percentBall5: makeNodeComponent("percentBall5"),
    maskGroup2: makeNodeComponent("maskGroup2"),
    document: makeNodeComponent("document"),
    property1Completed2: makeNodeComponent("property1Completed2"),
    body6: makeNodeComponent("body6"),
    body10Pt6: makeNodeComponent("body10Pt6"),
    percentBall6: makeNodeComponent("percentBall6"),
    maskGroup3: makeNodeComponent("maskGroup3"),
    document2: makeNodeComponent("document2"),
    property1Completed3: makeNodeComponent("property1Completed3"),
    body7: makeNodeComponent("body7"),
    body10Pt7: makeNodeComponent("body10Pt7"),
    percentBall7: makeNodeComponent("percentBall7"),
    maskGroup4: makeNodeComponent("maskGroup4"),
    document3: makeNodeComponent("document3"),
    property1Completed4: makeNodeComponent("property1Completed4"),
    body8: makeNodeComponent("body8"),
    body10Pt8: makeNodeComponent("body10Pt8"),
    percentBall8: makeNodeComponent("percentBall8"),
    maskGroup5: makeNodeComponent("maskGroup5"),
    document4: makeNodeComponent("document4"),

    // Metadata about props expected for PlasmicHomeWorkButton
    internalVariantProps: PlasmicHomeWorkButton__VariantProps,
    internalArgProps: PlasmicHomeWorkButton__ArgProps
  }
);

export default PlasmicHomeWorkButton;
/* prettier-ignore-end */
